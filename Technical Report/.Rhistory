#| echo: false
#| eval: true
#| warning: false
#| message: false
# Ensure necessary packages are installed and loaded
packages <- c("tidyverse", "patchwork", "performance", "knitr", "see")
for(pkg in packages) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
}
library(tidyverse)
library(patchwork)
library(performance)
library(knitr)
library(see)
# Load the Data
data <- read.csv("cleaned_data.csv", header = TRUE)
# Set Factor levels to display in desired order
data$age_group <- factor(data$age_group,
levels = c("Y", "M", "O"),
labels = c("18-35", "36-54", "55+"))
data$treatment <- factor(data$treatment,
levels = c("W", "E", "ED", "C", "CD"),
labels = c("Water (Control)", "Energy Drink",
"Energy Drink (Decaf)", "Coffee",
"Coffee (Decaf)"))
attach(data)
kruskal.test(score~treatment)
kruskal.test(aov(score~treatment)
)
kruskal.test(aov(score~treatment, data))
#| echo: false
#| eval: true
#| warning: false
#| message: false
# Ensure necessary packages are installed and loaded
packages <- c("tidyverse", "patchwork", "performance", "knitr", "see")
for(pkg in packages) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
}
library(tidyverse)
library(patchwork)
library(performance)
library(knitr)
library(see)
# Load the Data
data <- read.csv("cleaned_data.csv", header = TRUE)
# Set Factor levels to display in desired order
data$age_group <- factor(data$age_group,
levels = c("Y", "M", "O"),
labels = c("18-35", "36-54", "55+"))
data$treatment <- factor(data$treatment,
levels = c("W", "E", "ED", "C", "CD"),
labels = c("Water (Control)", "Energy Drink",
"Energy Drink (Decaf)", "Coffee",
"Coffee (Decaf)"))
attach(data)
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| label: tbl-table1
#| tbl-cap: Summary of Problem Solving Test Scores
# Table 1: Summary of Problem Solving Test Scores
sum_data <- data.frame(Value = c(min(score), max(score), round(mean(score), 4),
median(score), round(sd(score), 4), IQR(score)))
labs <- c("Min", "Max", "Mean", "Median", "SD", "IQR")
kable(t(sum_data), col.names = labs, align = "c")
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| label: fig-boxplots
#| fig-cap: Box Plot Showing Problem Solving Scores by Drink and Age Group
# Figure 1: Problem Solving By Drink and Age Group
tr <- c("Water (Control)", "Energy Drink", "Energy Drink (Decaf)", "Coffee",
"Coffee (Decaf")
age <- c("18-35", "36-54", "55+")
ggplot(data, aes(x = treatment, y = score, fill = age_group)) +
geom_boxplot(position = position_dodge(width = 0.8)) +
scale_x_discrete(labels = tr) +
scale_y_continuous(limits = c(60, 100)) +
labs(title = "Problem Solving Scores by Drink and Age Group",
x = "Treatment (Drink Type)", y = "Problem Solving Test Scores",
fill = "Age Group") +
scale_fill_brewer(palette = "Dark2", breaks = age, labels = age) +
theme_minimal()
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| label: fig-graphs
# Figure 2, 3: Normality and Variance Homogeneity Graphs
# for one and two factor ANOVA
one_factor_model <- aov(score ~ treatment, data = data)
check_model(one_factor_model, check = c("normality", "homogeneity"))
two_factor_model <- aov(score ~ treatment + age_group, data = data)
check_model(two_factor_model, check = c("normality", "homogeneity"))
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| label: fig-tables
one_way <- kruskal.test(score~treatment)
two_way <- kruskal.test(score~treatment+age_group)
kruskal.test(score~treatment)
kruskal.test(score~treatment+age_group)
kruskal.test(score~(treatment+age_group))
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| label: fig-tables
non_par <- kruskal.test(score~treatment)
kable(one_way)
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| label: fig-tables
non_par <- kruskal.test(score~treatment)
kable(one_way)
summary(kruskal.test(score~treatment))
one_way
View(one_way)
as.data.frame(kruskal.test(score~treatment))
install.packages("kableExtra")
#| echo: false
#| eval: true
#| warning: false
#| message: false
# Ensure necessary packages are installed and loaded
packages <- c("tidyverse", "patchwork", "performance", "knitr", "see",
"kableExtra")
for(pkg in packages) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
}
library(tidyverse)
library(patchwork)
library(performance)
library(knitr)
library(see)
library(kableExtra)
# Load the Data
data <- read.csv("cleaned_data.csv", header = TRUE)
# Set Factor levels to display in desired order
data$age_group <- factor(data$age_group,
levels = c("Y", "M", "O"),
labels = c("18-35", "36-54", "55+"))
data$treatment <- factor(data$treatment,
levels = c("W", "E", "ED", "C", "CD"),
labels = c("Water (Control)", "Energy Drink",
"Energy Drink (Decaf)", "Coffee",
"Coffee (Decaf)"))
attach(data)
library(kableExtra)
install.packages(kableExtra)
install.packages("kableExtra")
install.packages("kableExtra")
#| echo: false
#| eval: true
#| warning: false
#| message: false
# Ensure necessary packages are installed and loaded
packages <- c("tidyverse", "patchwork", "performance", "knitr", "see",
"kableExtra")
for(pkg in packages) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
}
library(tidyverse)
library(patchwork)
library(performance)
library(knitr)
library(see)
library(kableExtra)
# Load the Data
data <- read.csv("cleaned_data.csv", header = TRUE)
# Set Factor levels to display in desired order
data$age_group <- factor(data$age_group,
levels = c("Y", "M", "O"),
labels = c("18-35", "36-54", "55+"))
data$treatment <- factor(data$treatment,
levels = c("W", "E", "ED", "C", "CD"),
labels = c("Water (Control)", "Energy Drink",
"Energy Drink (Decaf)", "Coffee",
"Coffee (Decaf)"))
attach(data)
#| echo: false
#| eval: true
#| warning: false
#| message: false
# Ensure necessary packages are installed and loaded
packages <- c("tidyverse", "patchwork", "performance", "knitr", "see",
"kableExtra")
for(pkg in packages) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
}
library(tidyverse)
library(patchwork)
library(performance)
library(knitr)
library(see)
library(kableExtra)
# Load the Data
data <- read.csv("cleaned_data.csv", header = TRUE)
# Set Factor levels to display in desired order
data$age_group <- factor(data$age_group,
levels = c("Y", "M", "O"),
labels = c("18-35", "36-54", "55+"))
data$treatment <- factor(data$treatment,
levels = c("W", "E", "ED", "C", "CD"),
labels = c("Water (Control)", "Energy Drink",
"Energy Drink (Decaf)", "Coffee",
"Coffee (Decaf)"))
attach(data)
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| label: tbl-table1
#| tbl-cap: Summary of Problem Solving Test Scores
# Table 1: Summary of Problem Solving Test Scores
sum_data <- data.frame(Value = c(min(score), max(score), round(mean(score), 4),
median(score), round(sd(score), 4), IQR(score)))
labs <- c("Min", "Max", "Mean", "Median", "SD", "IQR")
kable(t(sum_data), col.names = labs, align = "c")
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| label: fig-boxplots
#| fig-cap: Box Plot Showing Problem Solving Scores by Drink and Age Group
# Figure 1: Problem Solving By Drink and Age Group
tr <- c("Water (Control)", "Energy Drink", "Energy Drink (Decaf)", "Coffee",
"Coffee (Decaf")
age <- c("18-35", "36-54", "55+")
ggplot(data, aes(x = treatment, y = score, fill = age_group)) +
geom_boxplot(position = position_dodge(width = 0.8)) +
scale_x_discrete(labels = tr) +
scale_y_continuous(limits = c(60, 100)) +
labs(title = "Problem Solving Scores by Drink and Age Group",
x = "Treatment (Drink Type)", y = "Problem Solving Test Scores",
fill = "Age Group") +
scale_fill_brewer(palette = "Dark2", breaks = age, labels = age) +
theme_minimal()
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| label: fig-graphs
# Figure 2, 3: Normality and Variance Homogeneity Graphs
# for one and two factor ANOVA
one_factor_model <- aov(score ~ treatment, data = data)
check_model(one_factor_model, check = c("normality", "homogeneity"))
two_factor_model <- aov(score ~ treatment + age_group, data = data)
check_model(two_factor_model, check = c("normality", "homogeneity"))
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| label: fig-tables
non_par <- kruskal.test(score~treatment)
kable(one_way)
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| label: fig-tables
non_par <- kruskal.test(score~treatment)
as.data.frame(non_par)
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| label: fig-tables
non_par <- kruskal.test(score~treatment, data)
View(non_par)
as.data.frame(non_par)
install.packages("broom")
library(broom)
tidy(non_par)
as.data.frame(tidy(non_par))
summary(score)
tidy(summary(score))
as.data.frame(tidy(summary(score)))
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| label: fig-tables
non_par <- kruskal.test(score~treatment, data)
formatted <- as.data.frame(non_par)
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| label: fig-tables
non_par <- kruskal.test(score~treatment, data)
formatted <- as.data.frame(tidy(non_par))
row_names <- c("", "Value")
col_names <- c("H-Statistic", "P Value", "Parameter", "Method")
kable(formatted, row.names = row_names, col.names = col_names,
caption = "Kruskal-Wallis H-Test")
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| label: fig-tables
non_par <- kruskal.test(score~treatment, data)
formatted <- as.data.frame(tidy(non_par))
row_names <- c("Value")
col_names <- c("H-Statistic", "P Value", "Parameter", "Method")
kable(formatted, row.names = row_names, col.names = col_names,
caption = "Kruskal-Wallis H-Test")
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| label: fig-tables
non_par <- kruskal.test(score~treatment, data)
formatted <- as.data.frame(tidy(non_par))
col_names <- c("H-Statistic", "P Value", "Parameter", "Method")
kable(formatted, row.names = "Value", col.names = col_names,
caption = "Kruskal-Wallis H-Test")
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| label: fig-tables
non_par <- kruskal.test(score~treatment, data)
formatted <- as.data.frame(tidy(non_par))
col_names <- c("H-Statistic", "P Value", "Parameter", "Method")
kable(formatted, row.names = c("Value"), col.names = col_names,
caption = "Kruskal-Wallis H-Test")
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| label: fig-tables
non_par <- kruskal.test(score~treatment, data)
formatted <- as.data.frame(tidy(non_par))
col_names <- c("H-Statistic", "P Value", "Parameter", "Method")
kable(formatted, col.names = col_names,
caption = "Kruskal-Wallis H-Test")
View(non_par)
View(formatted)
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| label: fig-tables
non_par <- kruskal.test(score~treatment, data)
formatted <- as.data.frame(tidy(non_par))
formatted$method <- NULL
col_names <- c("H-Statistic", "P Value", "DF")
kable(formatted, col.names = col_names,
caption = "Kruskal-Wallis H-Test")
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| label: fig-tables
non_par <- kruskal.test(score~treatment, data)
formatted <- as.data.frame(tidy(non_par))
#formatted$method <- NULL
col_names <- c("H-Statistic", "P Value", "DF")
kable(formatted, col.names = col_names,
caption = "Kruskal-Wallis H-Test")
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| label: fig-tables
non_par <- kruskal.test(score~treatment, data)
formatted <- as.data.frame(tidy(non_par))
#formatted$method <- NULL
col_names <- c("H-Statistic", "P Value", "DF", "Method")
kable(formatted, col.names = col_names,
caption = "Kruskal-Wallis H-Test")
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| label: fig-tables
non_par <- kruskal.test(score~treatment, data)
formatted <- as.data.frame(tidy(non_par))
col_names <- c("H-Statistic", "P Value", "DF")
kable(formatted, col.names = col_names,
caption = "Kruskal-Wallis H-Test")
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| label: fig-tables
non_par <- kruskal.test(score~treatment, data)
formatted <- as.data.frame(tidy(non_par))
col_names <- c("H-Statistic", "P Value", "DF")
kable(formatted, col.names = col_names,
caption = "Kruskal-Wallis H-Test")
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| label: fig-tables
non_par <- kruskal.test(score~treatment, data)
formatted <- as.data.frame(tidy(non_par))
formatted$method <- NULL
col_names <- c("H-Statistic", "P Value", "DF")
kable(formatted, col.names = col_names,
caption = "Kruskal-Wallis H-Test")
